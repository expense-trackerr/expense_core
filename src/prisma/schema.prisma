// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum CategoryTypeName {
  Income
  Expense
}

model User {
  id              String          @id
  name            String
  email           String          @unique
  created_at      DateTime        @default(now())
  updated_at      DateTime        @updatedAt
  categories      Category[]
  linked_accounts LinkedAccount[]
  transactions    Transaction[]

  @@map("user")
}

model LinkedAccount {
  item_id             String             @id
  name                String
  alias_name          String?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt
  access_token        String             @unique
  last_cursor         String?
  last_synced         DateTime?
  users               User               @relation(fields: [user_id], references: [id])
  user_id             String
  linked_sub_accounts LinkedSubAccount[]

  @@map("linked_account")
}

model LinkedSubAccount {
  account_id             String        @id
  name                   String
  alias_name             String?
  balance                Decimal?      @db.Decimal(10, 2)
  created_at             DateTime      @default(now())
  updated_at             DateTime      @updatedAt
  linked_account         LinkedAccount @relation(fields: [linked_account_item_id], references: [item_id], onDelete: Cascade)
  linked_account_item_id String
  transactions           Transaction[]

  @@map("linked_sub_account")
}

model CategoryType {
  id         String           @id @default(uuid())
  name       CategoryTypeName
  created_at DateTime         @default(now())
  updated_at DateTime         @updatedAt
  categories Category[]

  @@map("category_type")
}

model CategoryColor {
  id         String     @id @default(uuid())
  name       String
  hex_code   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  category   Category[]

  @@map("category_color")
}

model Category {
  id                String        @id @default(uuid())
  name              String
  budget            Decimal?      @db.Decimal(10, 2)
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  deleted           Boolean       @default(false) // Set to true when user deletes category; but keeps transactions
  user              User          @relation(fields: [user_id], references: [id])
  user_id           String
  transactions      Transaction[]
  category_type     CategoryType  @relation(fields: [category_type_id], references: [id])
  category_type_id  String
  category_color    CategoryColor @relation(fields: [category_color_id], references: [id])
  category_color_id String

  @@map("category")
}

model Transaction {
  id                    String           @id
  date                  DateTime
  name                  String
  amount                Decimal          @db.Decimal(10, 2)
  pending               Boolean          @default(false)
  currency              String           @default("CAD")
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt
  category              Category?        @relation(fields: [category_id], references: [id], onDelete: Restrict)
  category_id           String?
  user                  User             @relation(fields: [user_id], references: [id])
  user_id               String
  linked_sub_account    LinkedSubAccount @relation(fields: [linked_sub_account_id], references: [account_id])
  linked_sub_account_id String

  @@map("transaction")
}
